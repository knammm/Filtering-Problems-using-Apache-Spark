Note: Open spark-shell terminal => copy and paste the below

val data = sc.textFile("test1/FPT-2018-12-02.log")

def filterRecords(line: String): Boolean = {
  val fields = line.split(" ")
  fields.length == 7 && fields(0).toDouble >= 0 && fields(6).forall(Character.isDigit) && fields(6).toInt > 0 && fields(2) != "-"
}

val filterData = data.filter(filterRecords)

val ipInfoData = sc.textFile("test1/IPDict.csv")

val ipInfoMap = ipInfoData.map(line => {
  val fields = line.split(",")
  (fields(0), (fields(1), fields(2), fields(3)))
}).collectAsMap()

val ipInfoBroadcast = sc.broadcast(ipInfoMap)

def classifyHIT(line: String): String = {
  val contentName = line.split(" ")(2)
  if (contentName.endsWith("HIT")) "HIT"
  else if (contentName.endsWith("HIT1")) "HIT1"
  else "MISS"
}

val hitData = filterData.map(line => (classifyHIT(line), 1))
val hitCounts = hitData.reduceByKey(_ + _)

val hitCount = hitCounts.collect().find { case (hitStatus, _) => hitStatus == "HIT" }.map(_._2).getOrElse(0)
val missCount = hitCounts.collect().find { case (hitStatus, _) => hitStatus == "MISS" }.map(_._2).getOrElse(0)
val hit1Count = hitCounts.collect().find { case (hitStatus, _) => hitStatus == "HIT1" }.map(_._2).getOrElse(0)

val hitRate = (hitCount + hit1Count).toDouble / (hitCount + hit1Count + missCount).toDouble

println(s"HIT: $hitCount records")
println(s"HIT1: $hit1Count records")
println(s"MISS: $missCount records")
println(s"Hit Rate: $hitRate")

def enrichLogRecord(line: String): (String, (String, String, String), String, Double, String, Long) = {
  val fields = line.split(" ")
  val ip = fields(1)
  val additionalInfo = ipInfoBroadcast.value.getOrElse(ip, ("Unknown", "Unknown", "Unknown"))
  val latency = fields(0).toDouble
  val city = additionalInfo._2
  val contentSize = fields(fields.length - 1).toLong
  (ip, additionalInfo, city, latency, classifyHIT(line), contentSize)
}

val enrichedLogs = filterData.map(enrichLogRecord)

val ispHitStatusMap = enrichedLogs.map { case (_, (_, _, isp), _, _, hitStatus, _) => (isp, hitStatus) }

val ispHitStatusCounts = ispHitStatusMap.groupByKey().mapValues(status => (status.count(_ == "HIT"), status.count(_ == "HIT1"), status.count(_ == "MISS")))

println("ISP and Hit Status Counts:")
ispHitStatusCounts.collect().foreach { case (isp, (hitCount, hit1Count, missCount)) =>
  println(s"$isp: HIT=$hitCount, HIT1=$hit1Count, MISS=$missCount")
}

val ispHitRate = ispHitStatusCounts.mapValues { case (hitCount, hit1Count, missCount) =>
  val totalRequests = hitCount + hit1Count + missCount
  val hitRate = (hitCount + hit1Count).toDouble / totalRequests.toDouble
  (hitRate)
}

println("ISP Hit Rate:")
ispHitRate.collect().foreach { case (isp, hitRate) =>
  println(s"$isp: Hit Rate=$hitRate")
}

val maxHitRate = ispHitRate.values.max
val ispsWithMaxHitRate = ispHitRate.filter { case (_, hitRate) => hitRate == maxHitRate }.keys

val ispsWithMaxHitRateArr = ispsWithMaxHitRate.collect()

println(s"The ISPs with the maximum hit rate ($maxHitRate) are: ${ispsWithMaxHitRateArr.mkString("\n")}")
